# Query: console.log
# ContextLines: 1

313 results - 78 files

BackEnd\index.js:
   20  });
   21:
   22  const app = express();
   23  const PORT = process.env.PORT||6000;
   25  

   50  io.on('connection', (socket) => {
   52  

   69         room:room, content:message, senderId:senderId , receiverId: receiverId});
   71      

   80    socket.on('disconnect', () => {
   82    });

  133       DB_Connect()
  135     } catch (error) {
  136:     // console.log(error)
  137     }

BackEnd\Controller\application.controller.js:
    5      try {
    7          const userid = req.id;  // Ensure this is correct based on your auth middleware

    9  
   12  

   57          const userid = req?.id;  // Ensure this is correct based on your auth middleware
   59                  const applications = await application.find({ applicant: userid })

   98          const appid = req.params.id;  // Use appid instead of id if that's the actual param name
  102          const applicationFound = await application.findOne({ applicant: userid, _id: appid });

BackEnd\Controller\company.controller.js:
    9      
   11       if(!compName){

   28      await result.save({validateBeforeSave:false})
   30     

   73       const {id}=req.params;
   76     const getcomapany= await company.findOne({_id:id})

  102        
  104        

  133               
  135               const data= await company.deleteMany({userid:req.id})
  137                  const result=await company.find({userid:req.id})

  155       const id=req.id;
  157       if(!id){

  193          
  195         

BackEnd\Controller\job.controller.js:
    7                const finduser= await User.findOne({_id:userid});
    9           const{ title,

   18              createdby}=req.body;
   29                 if( 

   77              const keyword=req.query.keyword||"";
   79              const search={

   94              }
   96              return res.status(201).json({

  116      const companydata = await company.find({userid:req.id})
  118       const jobid=req.params.jobid;

  124              }).populate({path:'company',select:'name'})
  126              if(!result){

  133             const valid_company= companydata.filter((cc,idx)=>cc.name==result.company.name)
  135             if(valid_company.length!=0 ){

  148     } catch (error) {
  150      return res.status(500).json({

  161      const admin =req.id;
  163    const result=await job.find({createdby:admin})

  187       const userid=req.id;
  189       
  190       const {jobid}=req.body;
  193       const result=await job.findOne({"_id":jobid}).populate({

  196       })
  198     

  218              // const {search}=req.body
  220              const {keyword}=req.body
  222              const search={

  239              }
  241              return res.status(201).json({

  259          const{jobid}=req.params;
  261          const result=await job.deleteOne({$and:[{_id:jobid},{'createdby._id':req.id}]});
  263              return res.status(200).json({

  282              let keyword=req.query.keyword||"";
  284               if(keyword){

  287               }
  289              const search={

  312              }
  314              return res.status(201).json({

BackEnd\Controller\user.controller.js:
   13     const { fullname, username, email, password, phoneno, role,} = req.body;
   15      if (!fullname || !username || !email || !password || !phoneno || !role) {

   22  
   24      const userResult = await User.findOne({ email });

   41      const resume_upload= resume;
   43  

   52  
   54  

  127      const token = jwt.sign(tokenData, process.env.TOKENONE, { expiresIn: "10d" });
  129      return res.status(200).cookie("token", token, {

  260  
  262          const userid=req.id;

BackEnd\Middlewares\multer.middleware.js:
   6      destination:function(req,file,cb){
   8          cb(null,"D:/Job Portal/public/temp")

  12       
  15              cb(null,file.originalname)

BackEnd\Util\cloudinary.util.js:
  17      
  19  const isuploaded=await cloudinary.uploader.upload((filepath),{

  22  if(isuploaded){
  24      fs.unlinkSync(filepath)

  30  } catch (error) {
  32  fs.unlinkSync(filepath)

BackEnd\Util\DB_Connect.util.js:
  6          await mongoose.connect(process.env.MONGO_DB_URL)
  7:         console.log("Database connected")
  8      } catch (error) {
  9:         console.log("Database not connected ->",error.message)
  10      }

FrontEnd\Components\AppliedJobs_navbar.component.js:
  6    const navigate =useNavigate()
  8     

FrontEnd\Components\Chat_Admin_page.js:
  54          // });
  56           socketRef.current.emit("send-message", {

FrontEnd\Components\ChatComponent.js:
  61    // receiverId: otherPartyId,    recruiter
  63   socketRef.current.emit("send-message", {

FrontEnd\Components\Home_Category_carousel.component.js:
  16    const handleclick=(ct)=>{
  18      dispatch(setsearch(ct))

  27            <button className="w-full text-lg font-normal border-2 rounded-full px-2 border-gray-100" onClick={()=>{
  29              handleclick(ct)

FrontEnd\Components\Home_Latest_jobs.component.js:
  6      const{getalljobs}=useSelector((store)=>store.jobSlice);
  8      

FrontEnd\Components\Home.component.js:
  22      const navigate=useNavigate()
  24    const fetchData = async () => {

  30                setjobs(result?.data);
  32        }

FrontEnd\Components\Job_jobcard_details.component.js:
  12    const { jobid } = useParams();  // Ensure jobid matches your backend route
  14  // const{applications}=useSelector((store)=>store.applicationSlice)

  29        );
  31        if (data1?.data?.result?.application.length>0) {

  52      try {
  54        const result = await axios.post(

FrontEnd\Components\Jobs.component.js:
  20      } catch (error) {
  22      }

FrontEnd\Components\Login.component.js:
  38                });
  40  
  41               
  43                if (result.data.success) {

  59                  // setuserdata(result.data);
  61                  navigate("/Home");

  83      }
  85    return (

FrontEnd\Components\Logout.component.js:
  36  
  38        if (result?.data?.success) {

FrontEnd\Components\Profile.componenet.js:
   45          e.preventDefault();
   47              fetchdata();

   50  
   52      const fetchdata=async()=>{

   66               } catch (error) {
   68                  toast.error(`${error.message}`);

   91  
   93      } else {

  102              });
  104              setapplidata(data?.data?.result)

FrontEnd\Components\SearchResults.home.components.js:
   9      const{search}=useSelector(store=>store.jobSlice)
  11  const[searchdata,setsearchdata]=useState([])

  14                  const data=await axios.get(`http://localhost:8000/api/v1/job/getsearchjobs/?keyword=${search}`)
  16                  setsearchdata(data?.data?.result)

  18              
  20              }

  22  useEffect(()=>{fetchdata()},[])
  24      return (

FrontEnd\Components\SignUp.component.js:
  51        } else {
  53        }

FrontEnd\Components\UserProfile.component.js:
  4  const UserProfile = ({ name, description,role }) => {
  6   

FrontEnd\Components\Admin_components\Createcompany.admin.component.js:
  17      setcompName(e.target.value)
  19  }

  30           dispatch(setcompany({...company,company:compName}))
  32           navigate(`/admin/create/companydetails/${result?.data?.result?._id}`)

  34           }
  37         } catch (error) {
  38:         console.log(error)
  39         }

FrontEnd\Components\Admin_components\CreateCompanyDetails.admin.component.js:
  28          } catch (error) {
  29:             console.log(error);
  30          }

  50              dispatch(setloading(true));
  52              const data = await axios.put(

  64          } catch (error) {
  65:             console.log(error);
  66          } finally {

FrontEnd\Components\job_components\Createjobpage.componenet.js:
  21      const{userdata_global} =useSelector((store)=>store.userslice)
  23      useEffect(() => {

FrontEnd\Components\job_components\Job_user_applications.admin.components.js:
  23          try {
  25              const response = await axios.put(

  45  
  47          } catch (error) {

  57      }, []);
  59      return (

FrontEnd\dist\About.be4d443a.js:
  320          overlay.remove();
  322      }

FrontEnd\dist\About.be4d443a.js.map:
  1: âŸª 18222 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       

FrontEnd\dist\AdminJobs.admin.component.0291c6ce.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

FrontEnd\dist\AdminJobs.admin.component.0291c6ce.js.map:
  1: âŸª 20695 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       

FrontEnd\dist\AppliedJobs_navbar.component.2cf9a3a6.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  624      const navigate = (0, _reactRouterDom.useNavigate)();
  625:     console.log("APPLICATIONS", applications);
  626      const handleClick = (recruiter, status, userid, jobapplicationid)=>{

FrontEnd\dist\AppliedJobs_navbar.component.2cf9a3a6.js.map:
  1: âŸª 18761 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 10822 characters skipped âŸ«rom 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport {io} from \"socket.io-client\"\r\nconst AppliedJobsNavbar = ({ applications }) => {\r\n  const navigate =useNavigate()\r\nconsole.log(\"APPLICATIONS\",applications)\r\n   \r\nconst handleClick=(recruiter,status,userid,jobapplicationid)=>{\r\n\r\n  navigate(`/chat/${recruiter}/${status}/${userid}/${jobapplicationid}`)\r\n}\r\n      \r\n  return (\r\n    <div className=\"w-full flex justify-center items-center p-4 bg-gray-50 mt-8\">\r\n      <div className=\"w-11/12 md:w-7/12 lg:w-6/12 max-h-[50vh] border border-gray-300 rounded-lg shadow-lg bg-white\">\r\n        <div className=\"h-full\">\r\n          <table className=\"w-full table-fixed\">\r\n            <thead className=\"bg-gray-200\">\r\n              <tr>\r\n                <th className=\"w-1/4 border-b border-gray-300 px-4 py-3 text-left text-sm font-semibold text-gray-700\">\r\n                  Applicant ID\r\n                </th>\r\n                <th className=\"w-1/4 border-b border-gray-300 px-4 py-3 text-left text-sm font-semibold text-gray-700\">\r\n                  Job\r\n                </th>\r\n                <th className=\"w-1/4 b

FrontEnd\dist\AppliedJobs_navbar.component.559038f8.js:
   320          overlay.remove();
   321:         console.log("[parcel] \u2728 Error resolved");
   322      }

  3002   * socket.on("connect", () => {
  3003:  *   console.log("connected");
  3004   * });

  3014   * socket.on("disconnect", (reason) => {
  3015:  *   console.log(`disconnected due to ${reason}`);
  3016   * });

  3044           * socket.on("connect", () => {
  3045:          *   console.log(socket.connected); // true
  3046           * });

  3048           * socket.on("disconnect", () => {
  3049:          *   console.log(socket.connected); // false
  3050           * });

  3109       * socket.on("connect", () => {
  3110:      *   console.log(socket.disconnected); // false
  3111       * });

  3113       * socket.on("disconnect", () => {
  3114:      *   console.log(socket.disconnected); // true
  3115       * });

  3138       *
  3139:      * console.log(socket.active); // true
  3140       *

  3143       *     // the disconnection was initiated by the server, you need to manually reconnect
  3144:      *     console.log(socket.active); // false
  3145       *   }
  3146       *   // else the socket will automatically try to reconnect
  3147:      *   console.log(socket.active); // true
  3148       * });

  3546       * socket.on("disconnect", (reason) => {
  3547:      *   // console.log(reason); prints "io client disconnect"
  3548       * });

  3615       * socket.onAny((event, ...args) => {
  3616:      *   console.log(`got ${event}`);
  3617       * });

  3630       * socket.prependAny((event, ...args) => {
  3631:      *   console.log(`got event ${event}`);
  3632       * });

  3644       * const catchAllListener = (event, ...args) => {
  3645:      *   console.log(`got event ${event}`);
  3646       * }

  3681       * socket.onAnyOutgoing((event, ...args) => {
  3682:      *   console.log(`sent event ${event}`);
  3683       * });

  3698       * socket.prependAnyOutgoing((event, ...args) => {
  3699:      *   console.log(`sent event ${event}`);
  3700       * });

  3712       * const catchAllListener = (event, ...args) => {
  3713:      *   console.log(`sent event ${event}`);
  3714       * }

FrontEnd\dist\AppliedJobs_navbar.component.559038f8.js.map:
  1: âŸª 86696 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 101695 characters skipped âŸ« * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n  âŸª 1284 characters skipped âŸ«       this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"mesâŸª 13047 characters skipped âŸ«et instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission thatâŸª 903 characters skipped âŸ«ner that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be 

FrontEnd\dist\appstore.88fd436b.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

FrontEnd\dist\appstore.88fd436b.js.map:
  1: âŸª 22621 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       

FrontEnd\dist\Chat_Admin_page.e53d88b1.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  664          // });
  666          socketRef.current.emit("send-message", {

FrontEnd\dist\Chat_Admin_page.e53d88b1.js.map:
  1: âŸª 19240 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 12270 characters skipped âŸ«n        if (input.trim() === \"\") return;\r\n\r\n        // socketRef.current.emit(\"send-message\", {\r\n        //     room: userid,\r\n        //     message: input,\r\n        // });\r\n        console.log(userid,input+\"sender\"+userid)\r\n         socketRef.current.emit(\"send-message\", {\r\n  room: userid,\r\n      message: input,\r\n  senderId: \"\",\r\n  receiverId: userid,\r\n});\r\n\r\n        setMessages((prev) => [...prev, { content: input, sender: \"you\" }]);\r\n        setInput(\"\");\r\n    };\r\n\r\n   return (\r\n    <div className=\"max-w-md w-full mx-auto p-4 min-h-screen flex flex-col\">\r\n      <h3 className=\"text-2xl font-semibold mb-4 text-center\">ðŸ’¬ Simple Chat</h3>\r\n\r\n      {/* âœ… Scrollable chat box */}\r\n      <div\r\n        className=\"flex-1 bg-gray-100 p-4 rounded-lg shadow-inner overflow-y-auto mb-4\"\r\n        style={{ maxHeight: \"400px\", minHeight: \"300px\" }}\r\n \r\n      >\r\n        {messages.length === 0 ? (\r\n          <p className=\"text-center text-gray-500\">No messages yet.</p>\r\n        ) : (\r\n          messages.map((msg, idx) => (\r\n            <div\r\n              key={idx}\r\n              className={`mb-2 flex $

FrontEnd\dist\ChatComponent.bb1a83ae.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  676          // receiverId: otherPartyId,    recruiter
  678          socketRef.current.emit("send-message", {

FrontEnd\dist\ChatComponent.bb1a83ae.js.map:
  1: âŸª 19405 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 12524 characters skipped âŸ« }]);\r\n\r\n    // Emit to backend\r\n  //   room: jobApplicationId,  âœ… \r\n  // content: messageText,   âœ… \r\n  // senderId: recruiterOrUserId,    \r\n  // receiverId: otherPartyId,    recruiter\r\nconsole.log( roomId ,input,userid,recruiterId)\r\n socketRef.current.emit(\"send-message\", {\r\n  room: roomId,\r\n      message: input,\r\n  senderId: userid,\r\n  receiverId: recruiterId,\r\n});\r\n    // socketRef.current.emit('send-message', {\r\n    //   room: roomId,\r\n    //   message: input,\r\n\r\n      \r\n    // });\r\n\r\n\r\n\r\n    setInput('');\r\n  };\r\n\r\n return (\r\n    <div className=\"max-w-md w-full mx-auto p-4 min-h-screen flex flex-col\">\r\n      <h3 className=\"text-2xl font-semibold mb-4 text-center\">ðŸ’¬ Simple Chat</h3>\r\n\r\n      {/* âœ… Scrollable chat box */}\r\n      <div\r\n        className=\"flex-1 bg-gray-100 p-4 rounded-lg shadow-inner overflow-y-auto mb-4\"\r\n        style={{ maxHeight: \"400px\", minHeight: \"300px\" }}\r\n \r\n      >\r\n        {messages.length === 0 ? (\r\n          <p className=\"text-center text-gray-500\">No messages yet.</p>\r\n        ) : (\r\n          messages.map((msg, idx) => (\r\n            <div\r\n             

FrontEnd\dist\Companies.admin.component.5d55fb4b.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

FrontEnd\dist\Companies.admin.component.5d55fb4b.js.map:
  1: âŸª 19804 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       

FrontEnd\dist\Contact.componenet.b9b9aa64.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

FrontEnd\dist\Contact.componenet.b9b9aa64.js.map:
  1: âŸª 17499 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       

FrontEnd\dist\Createcompany.admin.component.f0025348.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  632          setcompName(e.target.value);
  634      };

  650                  }));
  652                  navigate(`/admin/create/companydetails/${result?.data?.result?._id}`);
  653              }
  656          } catch (error) {
  657:             console.log(error);
  658          }

FrontEnd\dist\Createcompany.admin.component.f0025348.js.map:
  1: âŸª 18802 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 11257 characters skipped âŸ«atch =useDispatch();\r\n    const{company}=useSelector((store)=>store.companySlice)\r\n const [compName,setcompName]=useState()\r\n const handlechange=(e)=>{\r\n    setcompName(e.target.value)\r\n    console.log(e.target.value)\r\n}\r\n    const handleclick=async()=>{\r\n\r\n       try {\r\n         const result=await axios.post(\"http://localhost:8000/api/v1/company/register\",{compName},{ withCredentials:true,\r\n             Headers:{\r\n                 \"Content-Type\":\"application/json\",\r\n             }}\r\n         )\r\n         if(result){\r\n             toast.success(\"Company created Succesfully\")\r\n         dispatch(setcompany({...company,company:compName}))\r\n         console.log(result?.data?.result?._id)\r\n         navigate(`/admin/create/companydetails/${result?.data?.result?._id}`)\r\n         \r\n         }\r\n         console.log(\"heyy\")\r\n             console.log(company)\r\n       } catch (error) {\r\n        console.log(error)\r\n       }\r\n    }\r\n\r\n  \r\n\r\n\r\nreturn(\r\n    <div className=\"w-4/6  mx-auto  mt-4 p-4\">\r\n        <div className=\"\">\r\n            <span className=\"font-medium text-2xl\">Your Company Name </span>\r\n            <p className=\"text-gray-400\">what would you like to do here please write here also...</p>\r\n        </div>\r\n      <div className=\"mt-4 flex flex-col gap-2 \">\r\n        <h1 className=\"text-lg font-medium\">Company Name</h1>\r\n        <input  className=\"text-gray-800 border-2 rounded-lg ps-4 p-2 border-black mr-2\" type=\"text\" required    onChange={(e)=>{handlechange(e)}}></input>\r\n        <div className=\"mt-4\">\r\n        <button type=\"button\" class=\"text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dar

FrontEnd\dist\CreateCompanyDetails.admin.component.4957a666.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  648          } catch (error) {
  649:             console.log(error);
  650          }

  669              dispatch((0, _authslice.setloading)(true));
  671              const data = await (0, _axiosDefault.default).put(`http://localhost:8000/api/v1/company/update/details/${compid}`, companydetails, {

  681          } catch (error) {
  682:             console.log(error);
  683          } finally{

FrontEnd\dist\CreateCompanyDetails.admin.component.4957a666.js.map:
  1: âŸª 20486 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 11796 characters skipped âŸ«      const data = await axios.get(`http://localhost:8000/api/v1/company/getcompany/${compid}`);\r\n            setcompanydetails(data?.data?.getcomapany);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchdata();\r\n    }, [setcompanydetails]);\r\n\r\n    const handleclick = (e) => {\r\n        const { name, value } = e.target;\r\n        setcompanydetails({ ...companydetails, [name]: value });\r\n    };\r\n\r\n    const dispatch = useDispatch();\r\n    const { loading } = useSelector((store) => store.auth);\r\n\r\n    const handleupdate = async (e) => {\r\n       \r\n       \r\n        e.preventDefault();\r\n        try {\r\n            dispatch(setloading(true));\r\n            console.log(\"final \",companydetails.logo)\r\n            const data = await axios.put(\r\n                `http://localhost:8000/api/v1/company/update/details/${compid}`,\r\n                companydetails,\r\n                {\r\n                    withCredentials: true,\r\n                    headers: { \"Content-Type\": \"multipart/form-data\" }\r\n                }\r\n            );\r\n            if (data) {\r\n                toast.success(data?.message);\r\n                navigate(\"/admin/companies\");\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            dispatch(setloading(false));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex justify-center items-center p-4\" style={{ width: 'auto', maxWidth: '100%' }}>\r\n            <div className=\"w-full\">\r\n                <form onSubmit={handleupdate} className=\"space-y-6 p-4 rounded-lg\">\r\n                    <h1 className=\"text-2xl font-medium mb-6 text-center\">Company Setup</h1>\r\n                    <div className=\"flex flex-col space-y-6\">\r\n                        <div className=\"flex justify-between items-center w-full\">\r\n                            <div className=\"flex items-center w-1/2 pr-2\">\r\n                                <label className=\"w-1/3\">Name</label>\r\n                                <input value={companydetails?.name} name=\"name\" className=\"border-2 ml-2 border-black px-2 py-1 rounded-lg w-full\" type=\"text\" required onChange={handleclick} />\r\n             

FrontEnd\dist\Createjobpage.componenet.ea7e21c0.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  640      const { userdata_global } = (0, _reactRedux.useSelector)((store)=>store.userslice);
  642      (0, _react.useEffect)(()=>{

FrontEnd\dist\Createjobpage.componenet.ea7e21c0.js.map:
  1: âŸª 21244 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 11611 characters skipped âŸ«ding, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const navigate = useNavigate();\r\n    const{userdata_global} =useSelector((store)=>store.userslice)\r\n    console.log(userdata_global)\r\n    useEffect(() => {\r\n        const fetchCompanies = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:8000/api/v1/company/get/company', {\r\n                    withCredentials: true,\r\n                });\r\n                setCompanies(response?.data?.result);\r\n                setLoading(false);\r\n            } catch (err) {\r\n                setError(err);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchCompanies();\r\n    }, []);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            if(userdata_global?.data?.role==='Recruiter'){\r\n        const data = await axios.post('http://localhost:8000/api/v1/job/register', {\r\n                title,\r\n                description,\r\n                requirement,\r\n                salary,\r\n                location,\r\n                jobType,\r\

FrontEnd\dist\Home.component.21b8a61a.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

FrontEnd\dist\Home.component.21b8a61a.js.map:
  1: âŸª 108037 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 209102 characters skipped âŸ«original state value (useful for debugging)\n   *\n   * ```ts\n   * const injectedReducer = rootReducer.inject(booleanSlice);\n   * const selectBoolean = injectedReducer.selector((state) => {\n   *   console.log(injectedReducer.selector.original(state).boolean) // possibly undefined\n   *   return state.boolean\n   * })\n   * ```\n   */\n  selector: {\n    /**\n     * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n     *\n     * ```ts\n     * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n     * //                                                                ^? boolean | undefined\n     *\n     * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n     *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n     *   // however selector() uses a Proxy around the first parameter to ensure that it evaluates to the initial state instead, if undefined\n     *   return state.boolean;\n     *   //           ^? boolean\n     * })\n     * ```\n     *\n     * Value passed to selectorFn will be a Proxy - use selector.original(proxy) to get original state value (useful for debugging)\n     *\n     * ```ts\n     * const injectedReducer = rootReducer.inject(booleanSlice);\n     * const selectBoolean = injectedReducer.selector((state) => {\n     *   console.log(injectedReducer.selector.original(state).boolean) // undefined\n     *   return state.boolean\n     * })\n     * ```\n     */\n    <Selector extends (state: DeclaredState, ...args: any[]) => unknown>(selectorFn: Selector): (state: WithOptionalProp<Parameters<Selector>[0], Exclude<keyof DeclaredState, keyof InitialState>>, ...args: Tail<Parameters<Selector>>) => ReturnType<Selector>;\n\n    /**\n     * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n     *\n     * ```ts\n     * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n     * //                                                                ^? boolean | undefined\n     *\n     * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n     *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n     *   // however selector() uses a Proxy around the first parameter to enâŸª 1198 characters skipped âŸ«tate value (useful for debugging)\n     *\n     * ```ts\n     * const injectedReducer = rootReducer.inject(booleanSlice);\n     * const selectBoolean = injectedReducer.selector((state) => {\n     *   console.log(injectedReducer.selector.original(state).boolean) // possibly undefined\n     *   return state.boolean\n     * })\n     * ```\n     */\n    <Selector extends (state: DeclaredState, ...args: any[]) => unknown, RootState>(selectorFn: Selector, selectState: (rootState: RootState, ...args: Tail<Parameters<Selector>>) => WithOptionalProp<Parameters<Selector>[0], Exclude<keyof DeclaredState, keyof InitialState>>): (state: RootState, ...args: Tail<Parameters<Selector>>) => ReturnType<Selector>;\n    /**\n     * Returns the unproxied state. Useful for debugging.\n     * @param state state Proxy, that ensures injected reducers have value\n     * @returns original, unproxied state\n     * @throws if value passed is not a state Proxy\n     */\n    original: (state: DeclaredState) => InitialState & Partial<DeclaredState>;\n  };\n}\ntype InitialState<Slices extends Array<AnySliceLike | ReducerMap>> = UnionToIntersection<Slices[number] extends infer Slice ? Slice extends AnySliceLike ? W

FrontEnd\dist\Home.component.d7403a3d.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  640      const navigate = (0, _reactRouterDom.useNavigate)();
  642      const fetchData = async ()=>{

  649                  setjobs(result?.data);
  651              }

  888      const handleclick = (ct)=>{
  890          dispatch((0, _jobSlice.setsearch)(ct));

  901                          onClick: ()=>{
  903                              handleclick(ct);

  969      const { getalljobs } = (0, _reactRedux.useSelector)((store)=>store.jobSlice);
  971      return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {

FrontEnd\dist\Home.component.d7403a3d.js.map:
  1: âŸª 22122 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 11559 characters skipped âŸ«seSelector((store)=>store.userslice);\r\n  const{applications}=useSelector((store)=>store.applicationSlice)\r\n\r\n    const [jobs,setjobs]=useState([]);\r\n    const navigate=useNavigate()\r\n    // console.log(\"home->>\",applications)\r\n  const fetchData = async () => {\r\n    try {\r\n      const result = await axios.get(\"http://localhost:8000/api/v1/job//getalljobs\", { withCredentials: true });\r\n      \r\n      if (result) {\r\n              dispatch(setgetalljobs(result?.data));\r\n              setjobs(result?.data);\r\n              console.log(\"jobs\",getalljobs)\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching jobs:\", error);\r\n    }\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n   if(userdata_global?.data?.role==='Recruiter'){\r\n    navigate(\"/admin/companies\")\r\n   }\r\n  }, [setjobs]);\r\n                                                              \r\n  return (\r\n    <>\r\n      <Home_info />\r\n      <Home_Category_carousel />\r\n      <Home_Latest_jobs  />\r\n      <Home_Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useDispatch } from \"react-redux\"\r\nimport { setsearch } from \"../Utils/Store/jobSlice\"\r\nimport { useState } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nconst Home_info=()=>{\r\nconst[value,setvalue]=useState(\"\")\r\n\r\nconst dispatch =useDispatch()\r\nconst navigate=useNavigate()\r\nconst handleclick=()=>{\r\n  dispatch(setsearch(value))\r\n  navigate('/SearchResults')âŸª 2568 characters skipped âŸ«n    \"Frontend Developer\",\r\n    \"Graphic Designer\",\r\n    \"Data Scientist\",\r\n  ];\r\n  const dispatch=useDispatch();\r\n  const navigate=useNavigate()\r\n  const handleclick=(ct)=>{\r\n    console.log(\"from function\",ct)\r\n    dispatch(setsearch(ct))\r\n    navigate('/SearchResults')\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full flex justify-center\">\r\n    <div className=\"flex h-1/6 w-[50%] rounded-full overflow-x-auto px-2 py-1 space-x-4 scrollbar-hide\">\r\n      {categories.map((ct, idx) => (\r\n        <div key={idx} className=\"text-xl  font-medium whitespace-nowrap\">\r\n          <button className=\"w-full text-lg font-normal border-2 rounded-full px-2 border-gray-100\" onClick={()=>{\r\n            console.log(\"button clicked\",ct)\r\n            handleclick(ct)\r\n          }}>{ct}</button>\r\n        </div>\r\n\r\n      ))}\r\n    </div>\r\n</div>\r\n  );\r\n};\r\n\r\nexport default Home_CategoryCarousel;\r\n","import { useSelector } from \"react-redux\";\r\nimport Home_Latest_Job_Card from \"./Home_Latest_Job_Card.component.js\";\r\n\r\nconst Home_Latest_jobs=()=>{\r\n    const jobs=[1,2,3,4,5,6,7,8];\r\n    const{getalljobs}=useSelector((store)=>store.jobSlice);\r\n    // console.log(\"from component\",getalljobs)\r\n    \r\n    return (\r\n    <div className=\"w-full m-0 mt-2 p-0  flex flex-col\">\r\n\r\n        <div className=\"ml-6 \">\r\n            <h1 className=\"text-4xl font-bold\"><span className=\"text-[#6a38c2]\">Latest & Top </span>Job Openings</h1>\r\n        </div>\r\n        <div className=\"flex flex-wrap mt-3 w-full justify-evenly \">\r\n           { !getalljobs? (\r\n                     jobs.slice(0,6).map((jb,idx)=>(\r\n               <Home_Latest_Job_Card key={idx}/>\r\n        )))\r\n        : (\r\n            getalljobs?.result?.map((jb,idx)=>(\r\n                <Home_Latest_Job_Card key={idx} data={jb}/>\r\n         ))\r\n        )\r\n    }\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Home_Latest_jobs;","import { Navigate, useNavigate } from \"react-router-dom\"\r\n\r\nconst Home_Latest_Job_Card = ({ data }) => {\r\n    const navigate=useNavigate()\r\n   const handleclick=()=>{\r\n    navigate(`/Details/${data

FrontEnd\dist\Home.component.feb1b7b8.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  938   * var result = merge({foo: 123}, {foo: 456});
  940   * ```

FrontEnd\dist\Home.component.feb1b7b8.js.map:
  1: âŸª 124288 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 21259 characters skipped âŸ«\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @

FrontEnd\dist\index.3d214d75.js:
    320          overlay.remove();
    321:         console.log("[parcel] \u2728 Error resolved");
    322      }

   2662                      }).catch(function(e) {
   2663:                         console.log("Could not get the stack frames of error:", e);
   2664                      });

   2721              };
   2722: âŸª 292279 characters skipped âŸ«u=i.fg,c=l.split("\\n"),s=0;s<c.length;++s){o||(n+=\'<span data-ansi-line="true">\',o=!0);var f=c[s].replace("\\r",""),d=x(t)[S[u]];null!=d?n+=\'<span style="color: \'+d+\';">\'+f+"</span>":(null!=u&&console.log("Missing color mapping: ",u),n+="<span>"+f+"</span>"),s<c.length-1&&(n+="</span>",o=!1,n+="<br/>")}return o&&(n+="</span>",o=!1),n},T=/^\\.(\\/[^/\\n ]+)+\\.[^/\\n ]+$/,C=[/^.*\\((\\d+):(\\d+)\\)$/,/^Line (\\d+):.+$/];var O=function(e){for(var t=e.split("\\n"),r="",n=0,o=0,a=0;a<t.length;a++){var i=k.a.ansiToText(t[a]).trim();if(i){!r&&i.match(T)&&(r=i);for(var l=0;l<C.length;){var u=i.match(C[l]);if(u){n=parseInt(u[1],10),o=parseInt(u[2],10)+1||1;break}l++}if(r&&n)break}}return r&&n?{fileName:r,lineNumber:n,colNumber:o}:null},P={cursor:"pointer"};var R=function(e){var t=Object(n.useContext)(me),r=e.error,a=e.editorHandler,i=O(r),l=null!==i&&null!==a;return o.a.createElement(c,null,o.a.createElement(p,{headerText:"Failed to compile"}),o.a.createElement("div",{onClick:l&&i?function(){return a(i)}:null,style:l?P:null},o.a.createElement(b,{main:!0,codeHTML:_(r,t)})),o.a.createElement(f,{line1:"This error occurred during the build time and cannot be dismissed."}))};function N(e
   2723              function ue(e) {

   3453      var assign = Object.assign;
   3454:     // Helpers to patch console.logs to avoid logging during side-effect free
   3455      // replaying on render function. This currently only patches the object

   3469          if (disabledDepth === 0) {
   3470:             /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
   3471              prevInfo = console.info;

   5324      }
   5325:     // Helpers to patch console.logs to avoid logging during side-effect free
   5326      // replaying on render function. This currently only patches the object

   5340          if (disabledDepth === 0) {
   5341:             /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
   5342              prevInfo = console.info;

   6765      var assign = Object.assign;
   6766:     // Helpers to patch console.logs to avoid logging during side-effect free
   6767      // replaying on render function. This currently only patches the object

   6781          if (disabledDepth === 0) {
   6782:             /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
   6783              prevInfo = console.info;

  44584      var assign = Object.assign;
  44585:     // Helpers to patch console.logs to avoid logging during side-effect free
  44586      // replaying on render function. This currently only patches the object

  44600          if (disabledDepth === 0) {
  44601:             /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
  44602              prevInfo = console.info;

FrontEnd\dist\index.3d214d75.js.map:
  1: âŸª 1024684 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 80314 characters skipped âŸ«eturn function(t){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];Y(t,r,3).then((function(n){null!=n&&e({error:t,unhandledRejection:r,contextSize:3,stackFrames:n})})).catch((function(e){console.log(\"Could not get the stack frames of error:\",e)}))}};function K(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"/static/js/bundle.js\",r=X(e);return a(window,(function(e){return r(e,!1)})),u(window,(function(e){return r(e,!0)})),function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:f;if(!c)try{s=Error.stackTraceLimit,Error.stackTraceLimit=e,c=!0}catch(e){}}(),p(),g(\"error\",(function(e,n){var o=function(e,t){for(var r,n,o=function(e){return e.split(\"\\n\").filter((function(e){return!e.match(/^\\s*in/)})).join(\"\\n\")}(e),a=\"\",i=0;i<t.length;++i){var l=t[i],u=l.fileName,c=l.lineNumber;if(null!=u&&null!=c&&!(u===r&&\"number\"==typeof c&&\"number\"==typeof n&&Math.abs(c-n)<3)){r=u,n=c;var s=t[i].name;a+=\"in \".concat(s=s||\"(anonymous function)\",\" (at \").concat(u,\":\").concat(c,\")\\n\")}}return{message:o,stack:a}}(e,n);r({message:o.message,stack:o.stack,__unmap_source:t},!1)})),function(){var e;!function(){if(c)try{Error.stackTracâŸª 296959 characters skipped âŸ«\n\"),s=0;s<c.length;++s){o||(n+=\\'<span data-ansi-line=\"true\">\\',o=!0);var f=c[s].replace(\"\\\\r\",\"\"),d=x(t)[S[u]];null!=d?n+=\\'<span style=\"color: \\'+d+\\';\">\\'+f+\"</span>\":(null!=u&&console.log(\"Missing color mapping: \",u),n+=\"<span>\"+f+\"</span>\"),s<c.length-1&&(n+=\"</span>\",o=!1,n+=\"<br/>\")}return o&&(n+=\"</span>\",o=!1),n},T=/^\\\\.(\\\\/[^/\\\\n ]+)+\\\\.[^/\\\\n ]+$/,C=[/^.*\\\\((\\\\d+):(\\\\d+)\\\\)$/,/^Line (\\\\d+):.+$/];var O=function(e){for(var t=e.split(\"\\\\n\"),r=\"\",n=0,o=0,a=0;a<t.length;a++){var i=k.a.ansiToText(t[a]).trim();if(i){!r&&i.match(T)&&(r=i);for(var l=0;l<C.length;){var u=i.match(C[l]);if(u){n=parseInt(u[1],10),o=parseInt(u[2],10)+1||1;break}l++}if(r&&n)break}}return r&&n?{fileName:r,lineNumber:n,colNumber:o}:null},P={cursor:\"pointer\"};var R=function(e){var t=Object(n.useContext)(me),r=e.error,a=e.editorHandler,i=O(r),l=null!==i&&null!==a;return o.a.createElement(c,null,o.a.createElement(p,{headerText:\"Failed to compile\"}),o.a.createElement(\"div\",{onClick:l&&i?function(){return a(i)}:null,style:l?P:null},o.a.createElement(b,{main:!0,codeHTML:_(r,t)})),o.a.createElement(f,{line1:\"This error occurred during the build tiâŸª 34549 characters skipped âŸ«atch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: âŸª 90045 characters skipped âŸ«e(subscribe, getSnapshot, getServerSnapshot) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: âŸª 70286 characters skipped âŸ«BOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: âŸª 1811656 characters skipped âŸ«original state value (useful for debugging)\n   *\n   * ```ts\n   * const injectedReducer = rootReducer.inject(booleanSlice);\n   * const selectBoolean = injectedReducer.selector((state) => {\n   *   console.log(injectedReducer.selector.original(state).boolean) // possibly undefined\n   *   return state.boolean\n   * })\n   * ```\n   */\n  selector: {\n    /**\n     * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n     *\n     * ```ts\n     * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n     * //                                                                ^? boolean | undefined\n     *\n     * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n     *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n     *   // however selector() uses a Proxy around the first parameter to ensure that it evaluates to the initial state instead, if undefined\n     *   return state.boolean;\n     *   //           ^? boolean\n     * })\n     * ```\n     *\n     * Value passed to selectorFn will be a Proxy - use selector.original(proxy) to get original state value (useful for debugging)\n     *\n     * ```ts\n     * const injectedReducer = rootReducer.inject(booleanSlice);\n     * const selectBoolean = injectedReducer.selector((state) => {\n     *   console.log(injectedReducer.selector.original(state).boolean) // undefined\n     *   return state.boolean\n     * })\n     * ```\n     */\n    <Selector extends (state: DeclaredState, ...args: any[]) => unknown>(selectorFn: Selector): (state: WithOptionalProp<Parameters<Selector>[0], Exclude<keyof DeclaredState, keyof InitialState>>, ...args: Tail<Parameters<Selector>>) => ReturnType<Selector>;\n\n    /**\n     * Create a selector that guarantees that the slices injected will have a defined value when selector is run.\n     *\n     * ```ts\n     * const selectBooleanWithoutInjection = (state: RootState) => state.boolean;\n     * //                                                                ^? boolean | undefined\n     *\n     * const selectBoolean = rootReducer.inject(booleanSlice).selector((state) => {\n     *   // if action hasn't been dispatched since slice was injected, this would usually be undefined\n     *   // however selector() uses a Proxy around the first parameter to enâŸª 1198 characters skipped âŸ«tate value (useful for debugging)\n     *\n     * ```ts\n     * const injectedReducer = rootReducer.inject(booleanSlice);\n     * const selectBoolean = injectedReducer.selector((state) => {\n     *   console.log(injectedReducer.selector.original(state).boolean) // possibly undefined\n     *   return state.boolean\n     * })\n     * ```\n     */\n    <Selector extends (state: DeclaredState, ...args: any[]) => unknown, RootState>(selectorFn: Selector, selectState: (rootState: RootState, ...args: Tail<Parameters<Selector>>) => WithOptionalProp<Parameters<Selector>[0], Exclude<keyof DeclaredState, keyof InitialState>>): (state: RootState, ...args: Tail<Parameters<Selector>>) => ReturnType<Selector>;\n    /**\n     * Returns the unproxied state. Useful for debugging.\n     * @param state state Proxy, that ensures injected reducers have value\n     * @returns original, unproxied state\n     * @throws if value passed is not a state Proxy\n     */\n    original: (state: DeclaredState) => InitialState & Partial<DeclaredState>;\n  };\n}\ntype InitialState<Slices extends Array<AnySliceLike | ReducerMap>> = UnionToIntersection<Slices[number] extends infer Slice ? Slice extends AnySliceLike ? WâŸª 310241 characters skipped âŸ«atch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: 

FrontEnd\dist\Job_jobcard_details.component.d12e3eb2.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  629      const { jobid } = (0, _reactRouterDom.useParams)(); // Ensure jobid matches your backend route
  631      // const{applications}=useSelector((store)=>store.applicationSlice)

  643              });
  645              if (data1?.data?.result?.application.length > 0) {

  662          try {
  664              const result = await (0, _axiosDefault.default).post(`http://localhost:8000/api/v1/application/applyjob/${jobid}`, {}, {

FrontEnd\dist\Job_jobcard_details.component.d12e3eb2.js.map:
  1: âŸª 20130 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 11086 characters skipped âŸ«Utils/Store/applicationSlice\";\r\n\r\nconst JobJobcardDetails = () => {\r\n\r\n\r\n  const dispatch=useDispatch()\r\n  const { jobid } = useParams();  // Ensure jobid matches your backend route\r\n  console.log(\"Job ID:\", jobid);\r\n// const{applications}=useSelector((store)=>store.applicationSlice)\r\n  const [jobDetails, setJobDetails] = useState(null);\r\n  const [status, setStatus] = useState(false);\r\n\r\n  const fetchdata = async () => {\r\n    try {\r\n      const data = await axios.get(\r\n        `http://localhost:8000/api/v1/job/getjobbyid/${jobid}`,\r\n        { withCredentials: true }\r\n      );\r\n\r\n      const data1 = await axios.post(\r\n        `http://localhost:8000/api/v1/job/appliedjobstatus`,\r\n        { jobid },\r\n        { withCredentials: true }\r\n      );\r\n      // console.log(\"data1->\", data1?.data?.result?.application);\r\n      if (data1?.data?.result?.application.length>0) {\r\n        setStatus(true);\r\n        const application = await axios.get(\"http://localhost:8000/api/v1/application/appliedjobs\", { withCredentials: true });\r\n        dispatch(addapplication(application.data.result));\r\n      } else {\r\n        setStatus(false);\r\n      }\r\n     \r\n      if (data?.data?.success) {\r\n        setJobDetails(data?.data?.result); // Store the job details\r\n        toast.success(data?.data?.message);\r\n      } else {\r\n        toast.error(data?.data?.message);\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Session expired. Please log in again.\");\r\n    }\r\n  };\r\n\r\n  const handleClick = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      console.log(\"Applying for job...\");\r\n      const result = await axios.post(\r\n        `http://localhost:8000/api/v1/application/applyjob/${jobid}`,\r\n        {},\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          withCredentials: true, // Important for sending cookies\r\n        }\r\n      );\r\n  \r\n      if (result.data.success) {\r\n\r\n           \r\n        setStatus(true); // Update the status after successful application\r\n        toast.success(result.data.message);\r\n      }else {\r\n        toast.error(\"Something Went Wrong please login again\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(\"Something Went Wrong please login again\" );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchdata();\r\n  }, [status]); // Empty dependency array to ensure this runs only once\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6 bg-white shadow-md rounded-md\">\r\n      {jobDetails ?

FrontEnd\dist\Job_user_applications.admin.components.84c24bd4.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  639          try {
  641              const response = await (0, _axiosDefault.default).put(`http://localhost:8000/api/v1/application/updatestatus/${appid}`, {

  660              });
  662          } catch (error) {

  671      }, []);
  673      return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {

FrontEnd\dist\Job_user_applications.admin.components.84c24bd4.js.map:
  1: âŸª 20007 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 11445 characters skipped âŸ« (error) {\r\n            console.error(\"Error fetching companies:\", error);\r\n        }\r\n    };\r\n\r\n    const handleClick = async (status, appid, userid) => {\r\n        try {\r\n            console.log(appid, \"->\", userid);\r\n            const response = await axios.put(\r\n                `http://localhost:8000/api/v1/application/updatestatus/${appid}`,\r\n                { status, userid },\r\n                {\r\n                    withCredentials: true,\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                }\r\n            );\r\n\r\n            // Update the local state to reflect the status change\r\n            setCompanies((prevCompanies) => {\r\n                const updatedApplications = prevCompanies.application.map((application) =>\r\n                    application._id === appid\r\n                        ? { ...application, status }\r\n                        : application\r\n                );\r\n                return { ...prevCompanies, application: updatedApplications };\r\n            });\r\n\r\n            console.log(response);\r\n        } catch (error) {\r\n            console.error(\"Error updating status:\", error);\r\n        }\r\n    };\r\nconst handleChat=(userid)=>{\r\n\r\n     navigate(`/chat/${userid}`)\r\n}\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n console.log(companies)\r\n    return (\r\n        <div className=\"mt-4 p-6 bg-gray-50 min-h-screen\">\r\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-6\">\r\n                Applicants ({companies?.application?.length || \"0\"})\r\n            </h1>\r\n            <div className=\"overflow-x-auto bg-white shadow-md rounded-lg border border-gray-200\">\r\n                <table className=\"w-full min-w-full divide-y divide-gray-200\">\r\n                    <thead className=\"bg-gray-100\">\r\n                        <tr>\r\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Full Name</th>\r\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Email</th>\r\n                            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Contact</th>\r\n                           

FrontEnd\dist\Jobs.component.677d95aa.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  670          } catch (error) {
  671:             console.log(error);
  672          }

FrontEnd\dist\Jobs.component.677d95aa.js.map:
  1: âŸª 21323 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 11589 characters skipped âŸ«8000/api/v1/job/getalljobs\", { withCredentials: true });\r\n      setgetalljob(result?.data?.result || []);\r\n      alljobref.current = result?.data?.result || [];\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const [filters, setFilters] = useState({\r\n  city: \"ALL\",\r\n  role: \"ALL\",\r\n  salary: \"ALL\",\r\n});\r\n\r\nconst updateFilter = (type, value) => {\r\n  setFilters((prev) => ({\r\n    ...prev,\r\n    [type]: value,\r\n  }));\r\n};\r\n\r\nuseEffect(() => {\r\n  if (!alljobref.current) return;\r\n\r\n  let filtered = [...alljobref.current];\r\n\r\n  // âœ… Filter by city\r\n  if (filters.city !== \"ALL\") {\r\n    filtered = filtered.filter(\r\n      (job) => job.location.toLowerCase() === filters.city.toLowerCase()\r\n    );\r\n  }\r\n\r\n  // âœ… Filter by role\r\n  if (filters.role !== \"ALL\") {\r\n    const keyword = filters.role.split(\" \")[0].toLowerCase();\r\n    filtered = filtered.filter((job) =>\r\n      job.title.toLowerCase().includes(keyword)\r\n    );\r\n  }\r\n\r\n  // âœ… Filter by salary\r\n  if (filters.salary !== \"ALL\") {\r\n    const numeric = parseInt(filters.salary.split(\"-\")[0].split(\"+\")[0]);\r\n    if (!isN

FrontEnd\dist\Login.component.ad59431d.js:
    320          overlay.remove();
    321:         console.log("[parcel] \u2728 Error resolved");
    322      }

    658              });
    661              if (result.data.success) {

    673                  // setuserdata(result.data);
    675                  navigate("/Home");

    696      };
    698      return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {

  24917                      var t, r;
  24918:                     console.log("%s - %s", (r = [
  24919                          A((t = new Date).getHours()),

  33515  function info() {
  33516:     console.log.apply(console, arguments);
  33517  }
  33518  function warn() {
  33519:     console.log.apply(console, arguments);
  33520  }

  33531      var duration = now() - time;
  33532:     console.log(label + ": " + duration + "ms");
  33533  }

  33540  function dir(object) {
  33541:     console.log(util.inspect(object) + "\n");
  33542  }

  33991  }
  33992: // log is just a thin wrapper to console.log that prepends a timestamp
  33993  exports.log = function() {
  33994:     console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
  33995  };

FrontEnd\dist\Login.component.ad59431d.js.map:
  1: âŸª 1367056 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 12324 characters skipped âŸ«      \"Content-Type\": \"application/json\"\r\n                },\r\n                withCredentials: true // Important for sending cookies and handling sessions\r\n              });\r\n             console.log(\"result->\",result)\r\n\r\n             \r\n            //  console.log(result.data.data)\r\n              if (result.data.success) {\r\n\r\n              \r\n                dispatch(setuserdata_global(result?.data))\r\n             \r\n                toast.success(result.data.message, {\r\n                  position: \"bottom-right\",\r\n                  autoClose: 5000,\r\n                  hideProgressBar: false,\r\n                  closeOnClick: true,\r\n                  pauseOnHover: true,\r\n                  draggable: true,\r\n                  progress: undefined,\r\n                  theme: \"light\",\r\n                  \r\n                  });\r\n                // setuserdata(result.data);\r\n               // console.log(\"from login component\", userdata);\r\n                navigate(\"/Home\");\r\n              } else {\r\n                toast.error(result.data.message, {\r\n                  position: \"bottom-right\",\r\n                  autoClose: 5000,\r\n                  hideProgressBar: false,\r\n                  closeOnClick: true,\r\n                  pauseOnHover: true,\r\n                  draggable: true,\r\n                  progress: undefined,\r\n                  theme: \"light\",\r\n                  transition: Bounce,\r\n                  });\r\n                navigate(\"/Login\");\r\n              }\r\n            } catch (error) {\r\n              toast.error(error.response ? error.response.data.message : error.message);\r\n            //  console.error(error.response ? error.response.data : error.message);\r\n            }\r\n            finally{\r\n              dispatch(setloading(false))\r\n            }\r\n    }\r\n//  useEffect(()=>(console.log(\"userdata updated\")),[setuserdata])\r\n  return (\r\n    <div className=\"w-full max-w-md mx-auto my-8 p-6 bg-white border border-gray-300 rounded-lg shadow-md\">\r\n      <h1 className=\"font-mono font-bold text-2xl mb-6 text-center text-gray-800\">login</h1>\r\n      <form className=\"flex flex-col space-y-5 \" onSubmit={HandleSubmit}>\r\n       \r\n      \r\n        <div>\r\n          <label htmlFor=\"email\" className=\"block mb-2 text-sm font-medium text-gray-700\">Email</label>\r\n          <input \r\n            type=\"email\" \r\n            id=\"email\" \r\n            className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-3\" \r\n            placeholder=\"Sarvesh@gmail.com\" \r\n            required \r\n            onChange={(e)=>(\r\n                setemail(e.target.value)\r\n              \r\n            )}\r\n          />\r\n        </div>\r\n       \r\n        <div>\r\n        âŸª 675889 characters skipped âŸ«7944);var P=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];function x(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){var t,r;console.log(\"%s - %s\",(r=[A((t=new Date).getHours()),A(t.getMinutes()),A(t.getSeconds())].join(\":\"),[t.getDate(),P[t.getMonth()],r].join(\" \")),e.format.apply(e,arguments))},e.inherits=r(1679),e._extend=function(t,e){if(!e||!S(e))return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t};var k=\"undefined\"!=typeof Symbol?Symbol(\"util.promisify.custom\"):void 0;function M(t,e){if(!t){var r=new Error(\"Promise was rejected with a falsy value\");r.reason=t,t=r}return e(t)}e.promisify=function(t){if(\"function\"!=typeof t)throw new TypeError('The \"original\" argument must be of type Function');if(k&&t[k]){var e;if(\"function\"!=typeof(e=t[k]))throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');return Object.defineProperty(e,k,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,r,n=new Promise((function(t,n){e=t,r=n})),i=[],o=0;o<arguments.length;o++)i.push(arguments[o]);i.push((function(t,n){t?r(t):e(n)})âŸª 253663 characters skipped âŸ«unctions[i]\n    var f = tuple[0]\n    var name = tuple[1]\n\n    if (!console[name]) {\n        console[name] = f\n    }\n}\n\nmodule.exports = console\n\nfunction log() {}\n\nfunction info() {\n    console.log.apply(console, arguments)\n}\n\nfunction warn() {\n    console.log.apply(console, arguments)\n}\n\nfunction error() {\n    console.warn.apply(console, arguments)\n}\n\nfunction time(label) {\n    times[label] = now()\n}\n\nfunction timeEnd(label) {\n    var time = times[label]\n    if (!time) {\n        throw new Error(\"No such label: \" + label)\n    }\n\n    delete times[label]\n    var duration = now() - time\n    console.log(label + \": \" + duration + \"ms\")\n}\n\nfunction trace() {\n    var err = new Error()\n    err.name = \"Trace\"\n    err.message = util.format.apply(null, arguments)\n    console.error(err.stack)\n}\n\nfunction dir(object) {\n    console.log(util.inspect(object) + \"\\n\")\n}\n\nfunction consoleAssert(expression) {\n    if (!expression) {\n        var arr = slice.call(arguments, 1)\n        assert.ok(false, util.format.apply(null, arr))\n    }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOâŸª 14706 characters skipped âŸ«getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys

FrontEnd\dist\Logout.component.9df54bf8.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  646              });
  648              if (result?.data?.success) {

FrontEnd\dist\Logout.component.9df54bf8.js.map:
  1: âŸª 18826 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 11968 characters skipped âŸ«",\r\n        {},\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          withCredentials: true,\r\n        }\r\n      );\r\n\r\n      console.log(\"result->\", result);\r\n      if (result?.data?.success) {\r\n        dispatch(clearuserdata_global());\r\n     \r\n        toast.success(result.data.message);\r\n        dispatch(removeall())\r\n        setLogoutMessage(\"Logout is successful!\");\r\n       // setuserdata(null); // Using null for clarity\r\n        //setuser(null);\r\n        //setbio(null);\r\n        navigate(\"/login\"); // Navigate immediately after success\r\n      } else {\r\n        toast.error(result.data.message);\r\n        setLogoutMessage(\"Logout failed. Please try again.\");\r\n        navigate(\"/login\"); // Navigate immediately after failure\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.message || \"Logout failed\");\r\n      setLogoutMessage(\"Logout failed. Please try again.\");\r\n      navigate(\"/login\"); // Navigate immediately after error\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    performLogout();\r\n  }, [])

FrontEnd\dist\NavBar.component.d1aae1c3.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  852  const UserProfile = ({ name, description, role })=>{
  854      return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("li", {

FrontEnd\dist\NavBar.component.d1aae1c3.js.map:
  1: âŸª 19543 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 14058 characters skipped âŸ«   </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst UserProfile = ({ name, description,role }) => {\r\n  // console.log(\"userprofile->\",name)\r\n \r\n  return (\r\n    <li className=\"relative cursor-pointer group font-sans\">\r\n      <img\r\n        width=\"40\"\r\n        height=\"40\"\r\n        src=\"https://img.icons8.com/office/80/circled-user-male-skin-type-3.png\"\r\n        alt=\"User\"\r\n        className=\"rounded-full\"\r\n      />\r\n      <div className=\"absolute top-full right-0 border bg-white border-gray-300 rounded-lg text-gray-800 text-sm py-4 px-5 whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity duration-300 shadow-lg\">\r\n        <p className=\"mb-2 text-lg font-semibold\">{`Hi ${name} ! `}</p>\r\n        {/* <p className=\"text-xs text-gray-600\">{description.length > 26 ? description.substring(0, 26) + '...' : description}</p> */}\r\n      \r\n\r\n        <div className=\"flex flex-col gap-2 mt-2\">\r\n        {\r\n              role==='Student'?\r\n          <div className=\"flex items-center  gap-2\">\r\n            <img\r\n              w

FrontEnd\dist\Profile.componenet.6a599656.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  677          e.preventDefault();
  679          fetchdata();

  681      };
  683      const fetchdata = async ()=>{

  695          } catch (error) {
  697              (0, _reactToastify.toast).error(`${error.message}`);

  712                  }));
  714          } else setFormData({

  723              });
  725              setapplidata(data?.data?.result);

FrontEnd\dist\Profile.componenet.6a599656.js.map:
  1: âŸª 22647 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 12578 characters skipped âŸ«\n        setFormData({ ...formData, [name]: value });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    // Handle form submission\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log(\"going this data to backend\",formData)\r\n            fetchdata();\r\n        setPopup(false); // Close popup after submission\r\n    };\r\n\r\n    // console.log(\"profile compoentent->\",userdata_global)\r\n    const fetchdata=async()=>{\r\n\r\n             try {\r\n                 const data=await axios.post(\"http://localhost:8000/api/v1/user/profile/update\",formData,{\r\n                   headers:{\r\n                       \"Content-Type\":\"multipart/form-data\",},\r\n                       withCredentials:true,\r\n                   },)\r\n                 \r\n             \r\n                 if(data?.data?.success){\r\n                    toast.success(data?.data?.message);\r\n                    dispatch(setuserdata_global(data.data))\r\n                 }\r\n             } catch (error) {\r\n                // console.log(error?.response)\r\n                toast.error(`${error.message}`);\r\n                \r\n             }\r\n             \r\n    }\r\n\r\n\r\n\r\n\r\n// Avoid Separate State: Agar tu file ko uploadfile mein set kar raha hai aur uske baad formData mein,\r\n//  toh state update ka delay issue aayega. Isliye, directly formData mein set kar dena best practice hai.\r\n// Spelling Mistakes: FormData ki jagah formData use kar, aur uloadfile ki jagah uploadfile use kar.\r\nconst handleinputfile = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n        // Update the uploadfile state first\r\n        setuploadfile(file);\r\n        \r\n        // Then update formData after the uploadfile state is updated\r\n        setFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            resumeUpload: file,\r\n        }));\r\n\r\n        // console.log(formData)\r\n    } else {\r\n        setFormData({ ...formData, resumeUpload: userdata_global?.Profile?.resume });\r\n    }\r\n};\r\n    const fetchjobdata=async()=>{\r\n\r\n        try {\r\n            const data=await axios.get(\"http://localhost:8000/api/v1/application/appliedjobs\",{\r\n                withCredentials:true\r\n            });\r\n            // console.log(\"jobdata\",data)\r\n            setapplidata(data?.data?.result)\r\n        \r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n    \r\n     useEffect(()=>{\r\n            fetchjobdata()\r\n     },[setapplidata])\r\n    \r\n    return (\r\n        <div className=\"flex flex-col mx-auto my-auto w-4/5\">\r\n            <div className=\"flex h-[70%] w-[70%] my-auto p-5 mx-auto shadow-lg rounded-lg\">\r\n                <div className=\"w-[95%]\">\r\n                    <div className=\"flex gap-5 mt-4\">\r\n                        <div>\r\n                            <img\r\n                                className=\"w-20 h-16 rounded-lg shadow-md\"\r\n                                src=\"https://www.shutterstock.com/image-vector/circle-line-simple-design-logo-600nw-2174926871.jpg\"\r\n                                alt=\"Company Logo\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"flex fl

FrontEnd\dist\SearchResults.home.components.4c922ffc.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  627      const { search } = (0, _reactRedux.useSelector)((store)=>store.jobSlice);
  629      const [searchdata, setsearchdata] = (0, _react.useState)([]);

  632              const data = await (0, _axiosDefault.default).get(`http://localhost:8000/api/v1/job/getsearchjobs/?keyword=${search}`);
  634              setsearchdata(data?.data?.result);
  635          } catch (error) {
  636:             console.log(error.message);
  637          }

  641      }, []);
  643      return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _jsxDevRuntime.Fragment), {

FrontEnd\dist\SearchResults.home.components.4c922ffc.js.map:
  1: âŸª 19110 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 10994 characters skipped âŸ«t { useState } from \"react\";\r\n\r\nconst SearchResults = () => {\r\n    const { getalljobs } = useSelector((store) => store.jobSlice);\r\n    const{search}=useSelector(store=>store.jobSlice)\r\n// console.log(search)\r\nconst[searchdata,setsearchdata]=useState([])\r\nconst fetchdata=async()=>{\r\n            try {\r\n                const data=await axios.get(`http://localhost:8000/api/v1/job/getsearchjobs/?keyword=${search}`)\r\n                console.log(data?.data?.result)\r\n                setsearchdata(data?.data?.result)\r\n            } catch (error) {\r\n            \r\n                 console.log(error.message)\r\n            }\r\n}\r\nuseEffect(()=>{fetchdata()},[])\r\nconsole.log(searchdata)\r\n    return (\r\n<>\r\n        <h1 className=\" p-4 text-left font-bold text-3xl\">Search Results-:{searchdata.length}</h1>\r\n        <div className=\"flex flex-wrap justify-center p-4\">\r\n            {\r\n            \r\n            searchdata.length==0?getalljobs?.result?.map((jb, idx) => (\r\n                <Home_Latest_Job_Card key={idx} data={jb} />\r\n                                                        ) )\r\n            \r\n        \r\n            \r\n            \r\n            \r\n            :(searchdata.map((jb, idx) => (\r\n                <Home_Latest_Job_Card key={idx} data={jb} />\r\n            )))}\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchResults;\r\n","import { Navigate, useNavigate } from \"react-router-dom\"\r\n\r\nconst Home_Latest_Job_Card = ({ data }) => {\r\n    const navigate=useNavigate()\r\n   const handleclick=()=>{\r\n    navigate(`/Details/${data?._id}`)\r\n   }\r\n    return (\r\n      

FrontEnd\dist\SignUp.component.86ab7408.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

  660                  navigate("/Login");
  661:             } else console.log("error one ->", result?.data);
  662          } catch (error) {

FrontEnd\dist\SignUp.component.86ab7408.js.map:
  1: âŸª 20700 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       âŸª 12314 characters skipped âŸ«,\r\n        }\r\n      );\r\n\r\n     \r\n      if (result?.data?.success) {\r\n        toast.success(result?.data?.message);\r\n        navigate(\"/Login\");\r\n       \r\n      } else {\r\n        console.log(\"error one ->\", result?.data);\r\n      }\r\n    } catch (error) {\r\n      navigate(\"/SignUp\");\r\n\r\n      toast.error(error?.response?.data?.message || error?.message);\r\n\r\n    \r\n    } finally {\r\n      dispatch(setloading(false));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-md mx-auto my-8 p-6 bg-white border border-gray-300 rounded-lg shadow-md\">\r\n      <h1 className=\"font-mono font-bold text-2xl mb-6 text-center text-gray-800\">\r\n        Sign Up\r\n      </h1>\r\n      <form className=\"flex flex-col space-y-5 \" onSubmit={HandleSubmit}>\r\n        <div>\r\n          <label\r\n            htmlFor=\"fullname\"\r\n            className=\"block mb-2 text-sm font-medium text-gray-700\"\r\n          >\r\n            Full Name\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"fullname\"\r\n            className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring

FrontEnd\dist\use_user_info.utils.1966d275.js:
  320          overlay.remove();
  321:         console.log("[parcel] \u2728 Error resolved");
  322      }

FrontEnd\dist\use_user_info.utils.1966d275.js.map:
  1: âŸª 17491 characters skipped âŸ«arcel] ðŸš¨ Connection to the HMR server was lost');\n    };\n  }\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] âœ¨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          ðŸš¨ ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n       
