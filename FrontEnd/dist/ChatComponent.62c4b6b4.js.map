{"mappings":"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","sources":["<anon>","Components/ChatComponent.js"],"sourcesContent":["\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true, configurable: true});\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire10c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7bxDP\", function(module, exports) {\n\n$parcel$defineInteropFlag(module.exports);\n\n$parcel$export(module.exports, \"default\", () => $53b3a7f144950169$export$2e2bcd8739ae039);\n\nvar $ayMG0 = parcelRequire(\"ayMG0\");\n\nvar $acw62 = parcelRequire(\"acw62\");\n\nvar $aphAM = parcelRequire(\"aphAM\");\n\nvar $73MNt = parcelRequire(\"73MNt\");\nconst $53b3a7f144950169$var$ChatComponent = ()=>{\n    const socketRef = (0, $acw62.useRef)(null);\n    const [messages, setMessages] = (0, $acw62.useState)([]);\n    const [input, setInput] = (0, $acw62.useState)('');\n    const { recruiterId: recruiterId, status: status, userid: userid, jobapplication_id: jobapplication_id } = (0, $aphAM.useParams)();\n    const roomId = userid // replace with jobApplicationId or unique room\n    ;\n    const [isTyping, setIsTyping] = (0, $acw62.useState)(false);\n    (0, $acw62.useEffect)(()=>{\n        socketRef.current = (0, $73MNt.io)(\"http://localhost:8000\", {\n            withCredentials: true\n        });\n        socketRef.current.emit(\"join-room\", userid);\n        socketRef.current.on(\"previous-messages\", (messages)=>{\n            setMessages(messages); // Load all old messages\n        });\n        socketRef.current.on(\"user-typing\", (data)=>{\n            setIsTyping(true);\n            // hide typing after 2 sec\n            setTimeout(()=>setIsTyping(false), 2000);\n        });\n        // ✅ Listen for incoming messages\n        socketRef.current.on('receive-message', (data)=>{\n            setMessages((prev)=>[\n                    ...prev,\n                    {\n                        content: data,\n                        sender: 'other'\n                    }\n                ]);\n        });\n        return ()=>{\n            socketRef.current.disconnect();\n        };\n    }, []);\n    const handleChange = (e)=>{\n        setInput(e.target.value);\n        if (socketRef.current) socketRef.current.emit(\"user-typing\", userid);\n    };\n    // ✅ Send message\n    const sendMessage = ()=>{\n        if (input.trim() === '') return;\n        // Show your own message\n        setMessages((prev)=>[\n                ...prev,\n                {\n                    content: input,\n                    sender: 'you'\n                }\n            ]);\n        // Emit to backend\n        //   room: jobApplicationId,  ✅ \n        // content: messageText,   ✅ \n        // senderId: recruiterOrUserId,    \n        // receiverId: otherPartyId,    recruiter\n        console.log(roomId, input, userid, recruiterId);\n        socketRef.current.emit(\"send-message\", {\n            room: roomId,\n            message: input,\n            senderId: userid,\n            receiverId: recruiterId\n        });\n        // socketRef.current.emit('send-message', {\n        //   room: roomId,\n        //   message: input,\n        // });\n        setInput('');\n    };\n    return /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n        className: \"max-w-md w-full mx-auto p-4 min-h-screen flex flex-col\",\n        children: [\n            /*#__PURE__*/ (0, $ayMG0.jsx)(\"h3\", {\n                className: \"text-2xl font-semibold mb-4 text-center\",\n                children: \"\\uD83D\\uDCAC Simple Chat\"\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                className: \"flex-1 bg-gray-100 p-4 rounded-lg shadow-inner overflow-y-auto mb-4\",\n                style: {\n                    maxHeight: \"400px\",\n                    minHeight: \"300px\"\n                },\n                children: messages.length === 0 ? /*#__PURE__*/ (0, $ayMG0.jsx)(\"p\", {\n                    className: \"text-center text-gray-500\",\n                    children: \"No messages yet.\"\n                }) : messages.map((msg, idx)=>/*#__PURE__*/ (0, $ayMG0.jsx)(\"div\", {\n                        className: `mb-2 flex ${msg.senderId === userid ? \"justify-end\" : \"justify-start\"}`,\n                        children: /*#__PURE__*/ (0, $ayMG0.jsx)(\"span\", {\n                            className: `inline-block px-4 py-2 max-w-xs break-words rounded-lg text-sm ${msg.senderId === userid ? \"bg-blue-600 text-white\" : \"bg-gray-300 text-gray-900\"}`,\n                            children: msg.content\n                        })\n                    }, idx))\n            }),\n            /*#__PURE__*/ (0, $ayMG0.jsxs)(\"div\", {\n                className: \"flex w-full\",\n                children: [\n                    /*#__PURE__*/ (0, $ayMG0.jsx)(\"input\", {\n                        value: input,\n                        onChange: handleChange,\n                        onKeyDown: (e)=>e.key === \"Enter\" && sendMessage(),\n                        placeholder: \"Type a message...\",\n                        className: \"flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-400\"\n                    }),\n                    /*#__PURE__*/ (0, $ayMG0.jsx)(\"button\", {\n                        onClick: sendMessage,\n                        className: \"bg-blue-600 text-white px-6 py-2 rounded-r-lg hover:bg-blue-700 transition\",\n                        children: \"Send\"\n                    })\n                ]\n            })\n        ]\n    });\n};\nvar $53b3a7f144950169$export$2e2bcd8739ae039 = $53b3a7f144950169$var$ChatComponent;\n\n});\n\n\n//# sourceMappingURL=ChatComponent.62c4b6b4.js.map\n","import { useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst ChatComponent = () => {\r\n  const socketRef = useRef(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\nconst {recruiterId,status,userid,jobapplication_id}=useParams();\r\n  const roomId =userid // replace with jobApplicationId or unique room\r\nconst [isTyping, setIsTyping] = useState(false);\r\n \r\n\r\n  useEffect(() => {\r\n    socketRef.current = io(\"http://localhost:8000\", {\r\n      withCredentials: true,\r\n    });\r\n     socketRef.current.emit(\"join-room\", userid);\r\n\r\n\r\n     socketRef.current.on(\"previous-messages\", (messages) => {\r\n    setMessages(messages); // Load all old messages\r\n  });\r\n   socketRef.current.on(\"user-typing\", (data) => {\r\n    \r\n        setIsTyping(true);\r\n        // hide typing after 2 sec\r\n        setTimeout(() => setIsTyping(false), 2000);\r\n  \r\n    });\r\n   \r\n    // ✅ Listen for incoming messages\r\n    socketRef.current.on('receive-message', (data) => {\r\n      \r\n      setMessages((prev) => [...prev, { content: data, sender: 'other' }]);\r\n    });\r\n\r\n       \r\n  \r\n    return () => {\r\n      socketRef.current.disconnect();\r\n    };\r\n  }, []);\r\n const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n    if (socketRef.current) {\r\n      socketRef.current.emit(\"user-typing\", userid);\r\n    }\r\n  };\r\n  // ✅ Send message\r\n  const sendMessage = () => {\r\n    if (input.trim() === '') return;\r\n\r\n    // Show your own message\r\n    setMessages((prev) => [...prev, { content: input, sender: 'you' }]);\r\n\r\n    // Emit to backend\r\n  //   room: jobApplicationId,  ✅ \r\n  // content: messageText,   ✅ \r\n  // senderId: recruiterOrUserId,    \r\n  // receiverId: otherPartyId,    recruiter\r\nconsole.log( roomId ,input,userid,recruiterId)\r\n socketRef.current.emit(\"send-message\", {\r\n  room: roomId,\r\n      message: input,\r\n  senderId: userid,\r\n  receiverId: recruiterId,\r\n});\r\n    // socketRef.current.emit('send-message', {\r\n    //   room: roomId,\r\n    //   message: input,\r\n\r\n      \r\n    // });\r\n\r\n\r\n\r\n    setInput('');\r\n  };\r\n\r\n return (\r\n    <div className=\"max-w-md w-full mx-auto p-4 min-h-screen flex flex-col\">\r\n      <h3 className=\"text-2xl font-semibold mb-4 text-center\">💬 Simple Chat</h3>\r\n\r\n      {/* ✅ Scrollable chat box */}\r\n      <div\r\n        className=\"flex-1 bg-gray-100 p-4 rounded-lg shadow-inner overflow-y-auto mb-4\"\r\n        style={{ maxHeight: \"400px\", minHeight: \"300px\" }}\r\n \r\n      >\r\n        {messages.length === 0 ? (\r\n          <p className=\"text-center text-gray-500\">No messages yet.</p>\r\n        ) : (\r\n          messages.map((msg, idx) => (\r\n            <div\r\n              key={idx}\r\n              className={`mb-2 flex ${\r\n                msg.senderId === userid ? \"justify-end\" : \"justify-start\"\r\n              }`}\r\n            >\r\n              <span\r\n                className={`inline-block px-4 py-2 max-w-xs break-words rounded-lg text-sm ${\r\n                  msg.senderId === userid\r\n                    ? \"bg-blue-600 text-white\"\r\n                    : \"bg-gray-300 text-gray-900\"\r\n                }`}\r\n              >\r\n                {msg.content}\r\n              </span>\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n\r\n      {/* ✅ Input and button */}\r\n      <div className=\"flex w-full\">\r\n        <input\r\n          value={input}\r\n          onChange={handleChange}\r\n          onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\r\n          placeholder=\"Type a message...\"\r\n          className=\"flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n        />\r\n        <button\r\n          onClick={sendMessage}\r\n          className=\"bg-blue-600 text-white px-6 py-2 rounded-r-lg hover:bg-blue-700 transition\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"names":["parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","Object","defineProperty","value","configurable","get","$53b3a7f144950169$export$2e2bcd8739ae039","set","s","enumerable","$ayMG0","$acw62","$aphAM","$73MNt","socketRef","useRef","messages","setMessages","useState","input","setInput","recruiterId","status","userid","jobapplication_id","useParams","isTyping","setIsTyping","useEffect","current","io","withCredentials","emit","on","data","setTimeout","prev","content","sender","disconnect","sendMessage","trim","console","log","room","message","senderId","receiverId","jsxs","className","children","jsx","style","maxHeight","minHeight","length","map","msg","idx","onChange","e","target","onKeyDown","key","placeholder","onClick"],"version":3,"file":"ChatComponent.62c4b6b4.js.map"}